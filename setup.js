#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const readline = require('readline');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});
console.log(' Twitter DM Fetcher Setup');
console.log('===========================\n');
async function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}
async function setupConfig() {
  console.log(' Setting up configuration...\n');
  if (fs.existsSync('config.json')) {
    const overwrite = await question('config.json already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('Skipping config setup.\n');
      return;
    }
  }
  if (!fs.existsSync('config.json.template')) {
    console.log(' Error: config.json.template not found!');
    process.exit(1);
  }
  let config = JSON.parse(fs.readFileSync('config.json.template', 'utf8'));
  const geminiKey = await question('Enter your Google Gemini API key: ');
  if (geminiKey && geminiKey.trim() !== '') {
    config.gemini.apiKey = geminiKey.trim();
  }
  await setupTwitterAuth();
  const useAirtable = await question('Do you want to use Airtable integration? (y/N): ');
  if (useAirtable.toLowerCase() === 'y') {
    await setupAirtable();
  }
  fs.writeFileSync('config.json', JSON.stringify(config, null, 2));
  console.log(' Configuration saved to config.json\n');
}
async function setupTwitterAuth() {
  console.log(' Setting up Twitter authentication...\n');
  if (fs.existsSync('.env')) {
    const overwrite = await question('.env file already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('Skipping Twitter auth setup. Make sure to configure .env manually.\n');
      return;
    }
  }
  console.log('Twitter Authentication Methods:');
  console.log('1. Cookie-based (RECOMMENDED - most reliable)');
  console.log('2. Username/Password');
  console.log('3. Skip for now (configure manually later)');
  console.log('');
  const method = await question('Choose authentication method (1/2/3): ');
  let envContent = `# Twitter DM Fetcher Configuration
# Generated by setup script

# Google Gemini API Configuration  
GEMINI_API_KEY=your_gemini_api_key_here

`;
  if (method === '1') {
    console.log('\n Cookie-based Authentication Setup:');
    console.log('1. Open Twitter/X.com in your browser and log in');
    console.log('2. Open Developer Tools (F12)');
    console.log('3. Go to Application/Storage → Cookies → https://x.com');
    console.log('4. Find and copy the values for:');
    console.log('   - auth_token (long string)');
    console.log('   - ct0 (shorter string)');
    console.log('');
    const authToken = await question('Enter your auth_token cookie value: ');
    const ct0 = await question('Enter your ct0 cookie value: ');
    envContent += `# Twitter Cookie Authentication
X_AUTH_TOKEN=${authToken.trim()}
X_CT0=${ct0.trim()}

`;
  } else if (method === '2') {
    console.log('\n Username/Password Authentication Setup:');
    const username = await question('Enter your Twitter username or handle: ');
    const password = await question('Enter your Twitter password: ');
    const email = await question('Enter your email (optional, for 2FA): ');
    envContent += `# Twitter Username/Password Authentication
X_USERNAME=${username.trim()}
X_PASSWORD=${password.trim()}
${email.trim() ? `X_EMAIL=${email.trim()}` : '# X_EMAIL=your_email_if_needed'}

`;
  } else {
    envContent += `# Twitter Authentication (configure manually)
# Method 1: Cookie-based (RECOMMENDED)
# X_AUTH_TOKEN=your_auth_token_cookie_here
# X_CT0=your_ct0_cookie_here

# Method 2: Username/Password  
# X_USERNAME=your_username_or_handle
# X_PASSWORD=your_password
# X_EMAIL=your_email_if_twitter_asks

`;
  }
  envContent += `# Browser Configuration
HEADLESS=false
SLOW=true

# Airtable Configuration (Optional)
# AIRTABLE_API_KEY=your_airtable_api_key_here  
# AIRTABLE_BASE_ID=your_airtable_base_id_here
# AIRTABLE_TABLE_ID=your_messages_table_id_here
# AIRTABLE_MESSAGE_REQUESTS_TABLE_ID=your_message_requests_table_id_here
`;
  fs.writeFileSync('.env', envContent);
  console.log(' Twitter authentication configured in .env file\n');
  if (method === '1') {
    console.log('️  Remember: Keep your .env file secure and never commit it to version control!\n');
  } else if (method === '2') {
    console.log('️  Note: Cookie-based auth is more reliable than username/password.\n');
  } else {
    console.log('  You can configure authentication later by editing the .env file.\n');
  }
}
async function setupAirtable() {
  console.log(' Setting up Airtable integration...\n');
  if (fs.existsSync('airtable-config.json')) {
    const overwrite = await question('airtable-config.json already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('Skipping Airtable setup.\n');
      return;
    }
  }
  const airtableConfig = {
    apiKey: "YOUR_AIRTABLE_API_KEY_HERE",
    baseId: "YOUR_AIRTABLE_BASE_ID_HERE",
    messageTableId: "YOUR_MESSAGES_TABLE_ID_HERE",
    messageRequestsTableId: "YOUR_MESSAGE_REQUESTS_TABLE_ID_HERE"
  };
  const apiKey = await question('Enter your Airtable API key: ');
  if (apiKey && apiKey.trim() !== '') {
    airtableConfig.apiKey = apiKey.trim();
  }
  const baseId = await question('Enter your Airtable Base ID: ');
  if (baseId && baseId.trim() !== '') {
    airtableConfig.baseId = baseId.trim();
  }
  const messageTableId = await question('Enter your Messages Table ID: ');
  if (messageTableId && messageTableId.trim() !== '') {
    airtableConfig.messageTableId = messageTableId.trim();
  }
  const msgReqTableId = await question('Enter your Message Requests Table ID: ');
  if (msgReqTableId && msgReqTableId.trim() !== '') {
    airtableConfig.messageRequestsTableId = msgReqTableId.trim();
  }
  fs.writeFileSync('airtable-config.json', JSON.stringify(airtableConfig, null, 2));
  console.log(' Airtable configuration saved to airtable-config.json\n');
}
async function createDirectories() {
  console.log(' Creating directories...\n');
  const dirs = ['regular-dms/data', 'regular-dms/screenshots', 'message-requests/data', 'message-requests/screenshots'];
  dirs.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, {
        recursive: true
      });
      console.log(` Created ${dir}`);
    } else {
      console.log(`  Directory ${dir} already exists`);
    }
  });
  console.log('');
}
async function installPlaywright() {
  console.log(' Installing Playwright Chromium browser...\n');
  const installBrowsers = await question('Install Playwright Chromium browser? This may take a few minutes. (Y/n): ');
  if (installBrowsers.toLowerCase() !== 'n') {
    console.log('Installing Playwright Chromium browser (only browser needed for Twitter scraping)...');
    const {
      spawn
    } = require('child_process');
    return new Promise(resolve => {
      const child = spawn('npx', ['playwright', 'install', 'chromium'], {
        stdio: 'inherit'
      });
      child.on('close', code => {
        if (code === 0) {
          console.log(' Playwright Chromium browser installed successfully\n');
          global.playwrightInstalled = true;
        } else {
          console.log(' Failed to install Playwright Chromium browser\n');
          global.playwrightInstalled = false;
        }
        resolve();
      });
    });
  } else {
    console.log('Skipping Playwright installation.\n');
    global.playwrightInstalled = false;
  }
}
async function showNextSteps() {
  console.log(' Setup Complete!\n');
  console.log('Next Steps:');
  console.log('===========');
  const playwrightInstalled = global.playwrightInstalled || false;
  if (!playwrightInstalled) {
    console.log('1. Install Playwright Chromium browser:');
    console.log('   npx playwright install chromium');
    console.log('');
    console.log('2. Start monitoring your Twitter DMs:');
    console.log('   npm start');
  } else {
    console.log('1. Start monitoring your Twitter DMs:');
    console.log('   npm start                (one-time run)');
    console.log('   npm run start:daemon     (background monitoring)');
  }
  console.log('');
  console.log(' For continuous monitoring, use the daemon mode!');
  console.log('   It runs in the background and checks every 4 hours.');
  console.log('');
  console.log('Check the README.md file for more information.');
  console.log('');
}
async function main() {
  try {
    await createDirectories();
    await setupConfig();
    await installPlaywright();
    await showNextSteps();
  } catch (error) {
    console.error(' Setup failed:', error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}
main();